{
    "env": {
        "browser": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 12,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
        "quotes": ["error", "single", { "avoidEscape": true }], // com aspas simples
        "spaced-comment": ["error", "always"], // espaço após comentário
        "space-before-blocks": ["error", "always"], // espaço antes de bloco de código
        "indent": ["error", 4], // identação por tabulação
        "semi": ["error", "never"], // sem ponto e vírgula
        "curly": "off", // if de somente 1 (um) comando pode não ter chaves
        "no-mixed-operators": "off", // permite que os operadores '&&' e '||' possam ser usados misturados sem parênteses
        "no-mixed-spaces-and-tabs": ["error"], // não permite que espaços e tabulações sejam misturados
        "no-irregular-whitespace": ["error"], // não permite que qualquer espaço em branco ocorra em conjunto com outros
        "object-curly-newline": "off", // permite a utilização de "formatação" mais livre na criação de objetos literiais
        "object-curly-spacing": "off", // permite a não existência de espaço antes de fechar chaves
        "padded-blocks": "off", // permite que linhas vazias sejam colocadas antes e após escopos
        "no-useless-constructor": "off", // permite construtores não usados
        "promise/param-names": "off", // permite que parâmetros de Promise tenham qualquer nome
        "no-eval": "error", // não permite a utilização do eval
        "linebreak-style": ["error", "unix"], // define a quebra de linha para LF
        "no-unused-vars": ["error", { "args": "none" }], // variáveis declaradas precisam necessariamente ser usadas, exceto argumentos de funções

        // TypeScript
        "@typescript-eslint/no-unused-vars": ["error", { "args": "none" }],  // variáveis declaradas precisam necessariamente ser usadas, exceto argumentos de funções
        "@typescript-eslint/no-explicit-any": "error", // não permite o uso do any
        "@typescript-eslint/interface-name-prefix": "off", // permite que interfaces comecem com I
        "@typescript-eslint/explicit-module-boundary-types": "error" // não permite que funções de classe ou exportadas não declarem valor de retorno
    }
}
